var searchIndex = JSON.parse('{\
"kani":{"doc":"","t":[2,5,0,5,5,2,5,14,5,0,23,0,23,23,0,8,10,5,3,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["Arbitrary","any","arbitrary","assert","assume","block_on","cover","cover","expect_fail","futures","proof","slice","stub","unwind","vec","Arbitrary","any","block_on","AnySlice","any_slice","any_slice_of_array","any_slice_of_array_mut","borrow","borrow_mut","deref","deref_mut","drop","from","get_slice","get_slice_mut","into","try_from","try_into","type_id","any_vec","exact_vec"],"q":["kani","","","","","","","","","","","","","","","kani::arbitrary","","kani::futures","kani::slice","","","","","","","","","","","","","","","","kani::vec",""],"d":["","This creates an symbolic <em>valid</em> value of type <code>T</code>. You can …","This module introduces the Arbitrary trait as well as …","Creates an assertion of the specified condition and …","Creates an assumption that will be valid after this …","","Creates a cover property with the specified condition and …","A macro to check if a condition is satisfiable at a …","Function used in tests for cases where the condition is …","This module contains functions to work with futures (and …","Marks a Kani proof harness","","Specify a function/method stub pair to use for proof …","Set Loop unwind limit for proof harnesses The attribute ‘…","","This trait should be used to generate symbolic variables …","","A very simple executor: it polls the future in a busy loop …","A struct that stores a slice of type <code>T</code> with a …","","Given an array <code>arr</code> of length <code>LENGTH</code>, this function returns …","A mutable version of the previous function","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Generates an arbitrary vector whose length is at most …","Generates an arbitrary vector that is exactly EXACT_LENGTH …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0],"f":[0,[[],1],0,[[2,3]],[2],0,[[2,3]],0,[[2,3]],0,0,0,0,0,0,0,[[]],[4],0,[[],5],[[]],[[]],[[]],[[]],[5],[5],[5],[[]],[5],[5],[[]],[[],6],[[],6],[[],7],[[],8],[[],8]],"p":[[8,"Arbitrary"],[15,"bool"],[15,"str"],[8,"Future"],[3,"AnySlice"],[4,"Result"],[3,"TypeId"],[3,"Vec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
